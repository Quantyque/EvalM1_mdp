// <auto-generated />
using EvalM1_API_mdp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EvalM1_API_mdp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250226122513_InitialInitDatabase")]
    partial class InitialInitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EvalM1_API_mdp.Model.Application", b =>
                {
                    b.Property<int>("IdApplication")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("IdApplication");

                    b.HasIndex("TypeId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("EvalM1_API_mdp.Model.Password", b =>
                {
                    b.Property<int>("IdPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPassword"));

                    b.Property<int>("IdApplication")
                        .HasColumnType("int");

                    b.Property<string>("PasswordValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdPassword");

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("EvalM1_API_mdp.Model.Type", b =>
                {
                    b.Property<string>("TypeCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("TypeCode");

                    b.ToTable("Type");

                    b.HasData(
                        new
                        {
                            TypeCode = "PRO"
                        },
                        new
                        {
                            TypeCode = "CLI"
                        });
                });

            modelBuilder.Entity("EvalM1_API_mdp.Model.Application", b =>
                {
                    b.HasOne("EvalM1_API_mdp.Model.Password", "Password")
                        .WithMany("Applications")
                        .HasForeignKey("IdApplication")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvalM1_API_mdp.Model.Type", "Type")
                        .WithMany("Applications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Password");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EvalM1_API_mdp.Model.Password", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("EvalM1_API_mdp.Model.Type", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
